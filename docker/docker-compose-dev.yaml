networks:
  lumina-bridge:
    driver: bridge

services:
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: lumina-minio
    networks:
      - lumina-bridge
    ports:
      - "19200:9000"
      - "19201:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ${LUMINA_DATA:-./volumes}/minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mysql:
    image: mysql:8.0
    container_name: lumina-mysql
    networks:
      - lumina-bridge
    ports:
      - "22406:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: lumina
      MYSQL_USER: lumina
      MYSQL_PASSWORD: lumina
      MYSQL_ROOT_HOST: '%'
    volumes:
      - ${LUMINA_DATA:-./volumes}/mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 10

  nsqlookupd:
    image: nsqio/nsq:v1.2.1
    container_name: lumina-nsqlookupd
    networks:
      - lumina-bridge
    ports:
      - "4260:4160"
      - "4261:4161"
    command: /nsqlookupd

  nsqd:
    image: nsqio/nsq:v1.2.1
    container_name: lumina-nsqd
    networks:
      - lumina-bridge
    ports:
      - "4250:4150"
      - "4251:4151"
    depends_on:
      - nsqlookupd
    command: /nsqd --lookupd-tcp-address=nsqlookupd:4160

  nsqadmin:
    image: nsqio/nsq:v1.2.1
    container_name: lumina-nsqadmin
    networks:
      - lumina-bridge
    ports:
      - "4271:4171"
    depends_on:
      - nsqlookupd
    command: /nsqadmin --lookupd-http-address=nsqlookupd:4161

  influxdb:
    image: influxdb:2.7
    container_name: lumina-influxdb
    networks:
      - lumina-bridge
    ports:
      - "48086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: lumina
      DOCKER_INFLUXDB_INIT_BUCKET: lumina
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: lumina-dev-token
    volumes:
      - ${LUMINA_DATA:-./volumes}/influxdb_data:/var/lib/influxdb2

  redis:
    image: bitnami/redis:8.0
    container_name: lumina-redis
    networks:
      - lumina-bridge
    ports:
      - "46379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_PASSWORD=lumina
      # 只在开发模式下加关闭 appendonly 模式
      - REDIS_EXTRA_FLAGS=--appendonly no
    volumes:
      - ${LUMINA_DATA:-./volumes}/redis_data:/bitnami/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "lumina", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-sentinel:
    image: bitnami/redis-sentinel
    container_name: lumina-redis-sentinel
    networks:
      - lumina-bridge
    depends_on:
      - redis
    ports:
      - "46380:26379"
    environment:
      - REDIS_MASTER_HOST=127.0.0.1
      - REDIS_MASTER_PORT_NUMBER=46379
      - REDIS_MASTER_PASSWORD=lumina
      - REDIS_SENTINEL_QUORUM=1
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zlmediakit:
    image: zlmediakit/zlmediakit:master
    container_name: lumina-zlmediakit
    networks:
      - lumina-bridge
    ports:
      - "38080:80"      # HTTP Web
      - "31935:1935"    # RTMP
      - "30554:554"     # RTSP
      - "38081:8080"    # HTTP API (if enabled)
    environment:
      TZ: Asia/Shanghai
    restart: unless-stopped